# Remove the version line - it's obsolete in Docker Compose V2
name: ${COMPOSE_PROJECT_NAME:-indonesia-regions-api}

services:
  # =================================
  # Main API Application
  # =================================
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.dev
      target: development
    container_name: ${COMPOSE_PROJECT_NAME:-indonesia-regions-api}-api-dev
    ports:
      - "${APP_PORT:-3000}:${APP_PORT:-3000}"
      - "${DEBUG_PORT:-9229}:${DEBUG_PORT:-9229}"
    environment:
      # Application settings
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${APP_PORT:-3000}
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      - API_VERSION=${API_VERSION:-v1}
      
      # Database connection
      - DB_HOST=${POSTGRES_HOST:-postgres}
      - DB_PORT=${POSTGRES_PORT:-5432}
      - DB_NAME=${POSTGRES_DB:-indonesia_regions_dev}
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:?Database password is required}
      - DB_SSL=false
      
      # Security
      - API_KEY=${API_KEY:?API key is required}
      - JWT_SECRET=${JWT_SECRET:?JWT secret is required}
      
      # CORS and rate limiting
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-60000}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-1000}
      
      # File watching for Docker
      - CHOKIDAR_USEPOLLING=${CHOKIDAR_USEPOLLING:-true}
      - CHOKIDAR_INTERVAL=${CHOKIDAR_INTERVAL:-1000}
    volumes:
      # Mount source code for hot reload
      - ../src:/app/src:cached
      - ../tests:/app/tests:cached
      - ../package.json:/app/package.json:ro
      - ../nodemon.json:/app/nodemon.json:ro
      - ../README.md:/app/README.md:ro
      # Prevent node_modules from being overwritten
      - /app/node_modules
      # Mount logs directory
      - ../logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dev-network
    restart: unless-stopped
    stdin_open: true
    tty: true
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =================================
  # PostgreSQL Database
  # =================================
  postgres:
    image: postgres:${POSTGRES_VERSION:-15-alpine}
    container_name: ${COMPOSE_PROJECT_NAME:-indonesia-regions-api}-postgres-dev
    environment:
      - POSTGRES_DB=${POSTGRES_DB:?Database name is required}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?Database password is required}
      - POSTGRES_INITDB_ARGS=${POSTGRES_INITDB_ARGS:---encoding=UTF-8 --lc-collate=C --lc-ctype=C}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      # Persistent database storage
      - postgres_dev_data:/var/lib/postgresql/data
      # Initialization scripts
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/001-init.sql:ro
      - ./postgres/seed-data.sql:/docker-entrypoint-initdb.d/002-seed-data.sql:ro
      # PostgreSQL configuration
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-indonesia_regions_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB

  # =================================
  # pgAdmin for Database Management
  # =================================
  pgadmin:
    image: dpage/pgadmin4:${PGADMIN_VERSION:-8.1}
    container_name: ${COMPOSE_PROJECT_NAME:-indonesia-regions-api}-pgadmin-dev
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL:-admin@indonesiaregions.dev}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD:?pgAdmin password is required}
      - PGADMIN_CONFIG_SERVER_MODE=${PGADMIN_CONFIG_SERVER_MODE:-False}
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=${PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED:-False}
      - PGADMIN_LISTEN_PORT=80
    ports:
      - "${PGADMIN_PORT:-8080}:80"
    volumes:
      # pgAdmin data persistence - FIXED THE TYPO HERE
      - pgadmin_dev_data:/var/lib/pgadmin
      # Pre-configured servers
      - ./pgadmin/servers.json:/pgadmin4/servers.json:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dev-network
    restart: unless-stopped

  # =================================
  # Redis for Caching
  # =================================
  redis:
    image: redis:${REDIS_VERSION:-7-alpine}
    container_name: ${COMPOSE_PROJECT_NAME:-indonesia-regions-api}-redis-dev
    ports:
      - "${REDIS_PORT:-6379}:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - redis_dev_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    command: >
      redis-server /etc/redis/redis.conf
      ${REDIS_PASSWORD:+--requirepass ${REDIS_PASSWORD}}
      --databases ${REDIS_DATABASES:-16}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "${REDIS_PASSWORD:+--pass ${REDIS_PASSWORD}}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # =================================
  # Redis Commander (Redis GUI)
  # =================================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ${COMPOSE_PROJECT_NAME:-indonesia-regions-api}-redis-commander-dev
    environment:
      - REDIS_HOSTS=local:${REDIS_HOST:-redis}:${REDIS_PORT:-6379}${REDIS_PASSWORD:+:${REDIS_PASSWORD}}
      - HTTP_USER=${REDIS_COMMANDER_HTTP_USER:-admin}
      - HTTP_PASSWORD=${REDIS_COMMANDER_HTTP_PASSWORD:-admin123}
      - PORT=8081
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - dev-network
    restart: unless-stopped

# =================================
# Volumes - FIXED THE TYPO HERE
# =================================
volumes:
  postgres_dev_data:
    driver: local
    name: ${COMPOSE_PROJECT_NAME:-indonesia-regions-api}_postgres_dev_data
  pgadmin_dev_data:  # FIXED: was pgladmin_dev_data
    driver: local
    name: ${COMPOSE_PROJECT_NAME:-indonesia-regions-api}_pgadmin_dev_data
  redis_dev_data:
    driver: local
    name: ${COMPOSE_PROJECT_NAME:-indonesia-regions-api}_redis_dev_data

# =================================
# Networks
# =================================
networks:
  dev-network:
    driver: bridge
    name: ${COMPOSE_PROJECT_NAME:-indonesia-regions-api}_dev_network
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET:-172.20.0.0/16}
